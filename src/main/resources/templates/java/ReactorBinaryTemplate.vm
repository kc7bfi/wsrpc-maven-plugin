package $packageName;

import java.nio.ByteBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.HashMap;
import java.util.Map;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;

import org.apache.commons.lang3.concurrent.BasicThreadFactory;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import net.psgglobal.wsrpc.jsonrpc2.JsonRpc20ParseException;
import net.psgglobal.wsrpc.jsonrpc2.JsonRpc20Request;
import net.psgglobal.wsrpc.jsonrpc2.JsonRpc20Response;
import net.psgglobal.wsrpc.core.WsRpcCompositFuture;

import io.reactivex.subjects.BehaviorSubject;

/**
 * Generated with Velocity - DO NOT EDIT
 *
 * This class receives the WebSocket requests and sends them
 * to the appropreate Agent
 *
 * This class supports binary communications via the WebSocket
 */
public abstract class ${specname}Reactor<T extends ${specname}Agent> {
	protected Logger logger = LoggerFactory.getLogger(getClass().getName());

	private final static boolean REQUIRE_AUTHENTICATION = $rquireAuth;
	private final Map<String, T> managedAgents = new HashMap<>();
	private final WsRpcCompositFuture compositFutures = new WsRpcCompositFuture();
#if ($synchronized == "server" || $synchronized == "both")
	private ExecutorService threadPool = Executors.newSingleThreadExecutor(new BasicThreadFactory.Builder().daemon(true).namingPattern("wsrpc-${specname}-%d").build());
#else
	private static ExecutorService threadPool = Executors.newCachedThreadPool(new BasicThreadFactory.Builder().daemon(true).namingPattern("wsrpc-${specname}-%d").build());
#end

	/**
	 * Create a managed agent
	 * @param wsSession the WebSocket session
	 * @return the new managed agent
	 */
	public abstract T createAgent(Session wsSession);
	
	/**
	 * Validate the JWT string
	 * @param jwtToken the JWT token
	 * @return true if the token is valid
	 */
	public abstract DecodedJWT valiateJWTToken(String jwtToken) throws JWTVerificationException;
	
	/**
	 * Called when a WebSocket session is opened
	 */
	@OnOpen
	public void onOpen(Session wsSession) {
		if (logger.isDebugEnabled()) logger.debug("WsSession {} opened", wsSession.getId());
#if ($maxBinaryMessageSize != "0")
		wsSession.setMaxBinaryMessageBufferSize($maxBinaryMessageSize);
#end
		T managedAgent = createAgent(wsSession);
		managedAgents.put(wsSession.getId(), managedAgent);
		managedAgent.onAgentAdded(managedAgent);
	}

	/**
	 * Called when a WebSocket session is closed
	 */
	@OnClose
	public void onClose(Session wsSession) {
		if (logger.isDebugEnabled()) logger.debug("WsSession {} closed", wsSession.getId());
		T managedAgent = managedAgents.remove(wsSession.getId());
		if (managedAgent != null) {
			managedAgent.onAgentRemoved(managedAgent);
			managedAgent.close();
		}
		compositFutures.cancelRemaining(true);
#if ($synchronized == "server" || $synchronized == "both")
		threadPool.shutdown();
#end
	}

	/**
	 * Called when an error occurs on a WebSocket session
	 */
	@OnError
	public void onError(Session wsSession, Throwable error) {
		logger.warn("WebSocket error: {}", ExceptionUtils.getMessage(error));
		T managedAgent = managedAgents.remove(wsSession.getId());
		if (managedAgent != null) managedAgent.onAgentRemoved(managedAgent);
	}

	/**
	 * Convert a ByteBuffer to a String
	 * @param buffer the ByteBuffer to convert
	 * @return the string
	 */
	private String byteBufferString(ByteBuffer buffer) {
		byte[] str = new byte[buffer.remaining()];
		buffer.get(str);
		return new String(str);
	}

	/**
	 * Process an inbound message
	 * @param wsSession the WebSocket session
	 * @param message the JSON message
	 */
	@OnMessage
	public void onMessage(Session wsSession, ByteBuffer message) {
		String json = byteBufferString(message);
		if (logger.isDebugEnabled()) logger.debug("OnMessage: {}", json);
		T managedAgent = managedAgents.get(wsSession.getId());
		if (managedAgent == null) {
			logger.warn("Managed session for {} is unknown", wsSession.getId());
			return;
		}

		// process results
		try {
			JsonRpc20Response response = JsonRpc20Response.parse(json);
			managedAgent.processResponse(response);
			return;
		} catch (JsonRpc20ParseException e) {
		
			// process the message
			JsonRpc20Request request = null;
			try {
				request = JsonRpc20Request.parse(json);

				// Verify that we have been authenticated
				if (REQUIRE_AUTHENTICATION && !request.getMethod().equals("Authenticate") && !managedAgent.isAuthenticated()) {
					if (logger.isDebugEnabled()) logger.debug("Session {} has not been authenticated", wsSession.getId());
					managedAgent.sendInvalidRequest("User not authenticated", (Long)request.getId());
					return;
				}

				// process methods
				final JsonRpc20Request finalRequest = request;
				if (request.getMethod().equals("Authenticate")) doAuthenticate(managedAgent, request);
#foreach ($request in $clientRequests)
				else if (${display.capitalize($request.name)}Request.canNarrow(request)) compositFutures.add(threadPool.submit(() -> managedAgent.on${display.capitalize($request.name)}(${display.capitalize($request.name)}Request.narrow(finalRequest))));
#end
#foreach ($notice in $clientNotices)
				else if (${display.capitalize($notice.name)}Notice.canNarrow(request)) compositFutures.add(threadPool.submit(() -> managedAgent.on${display.capitalize($notice.name)}(${display.capitalize($notice.name)}Notice.narrow(finalRequest))));
#end
				return;
			} catch (JsonRpc20ParseException ee) {
				if (logger.isDebugEnabled()) logger.debug("Error processing message {}: {}", json, ExceptionUtils.getMessage(ee));
			} catch (Throwable ee) {
				logger.warn("Error processing message {}: {}", json, ExceptionUtils.getMessage(ee), ee);
				if (request != null) managedAgent.sendSilentInternalError(ExceptionUtils.getMessage(ee), (Long)request.getId());
			}
		} catch (Throwable e) {
			logger.warn("Error processing response message {}: {}", json, ExceptionUtils.getMessage(e), e);
		}
		
		logger.warn("unknown message: {}", json);
	}

	/**
	 * Authenticate an inbound session
	 * @param managedAgent the managed agent
	 * @param request the Authentication request
	 */
	private void doAuthenticate(T managedAgent, JsonRpc20Request request) {
		try {
			DecodedJWT jwtAuthentication = valiateJWTToken((String) request.getMapParam("token"));
			managedAgent.setJwtAuthentication(jwtAuthentication);
			managedAgent.sendResponse(true, (Long)request.getId());
			if (logger.isDebugEnabled()) logger.debug("WsSession {} authenticated", managedAgent.getWsSessionId());
		} catch (JWTVerificationException e) {
			if (logger.isDebugEnabled()) logger.debug("Invalid authentication token for session {}: {}", managedAgent.getWsSessionId(), ExceptionUtils.getMessage(e));
			managedAgent.sendSilentInvalidRequest("Invalid authentication token", (Long)request.getId());
		} catch (NullPointerException e) {
			if (logger.isDebugEnabled()) logger.debug("Could not authenticate session {}: {}", managedAgent.getWsSessionId(), ExceptionUtils.getMessage(e), e);
			managedAgent.sendSilentInternalError(ExceptionUtils.getMessage(e), (Long)request.getId());
		} catch (Exception e) {
			logger.warn("Could not authenticate session {}: {}", managedAgent.getWsSessionId(), ExceptionUtils.getMessage(e));
			managedAgent.sendSilentInternalError(ExceptionUtils.getMessage(e), (Long)request.getId());
		}
	}
}
