package $packageName;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import net.psgglobal.wsrpc.jsonrpc2.JsonRpc20Request;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated with Velocity - DO NOT EDIT
#if ($requestJavadoc)
 *
 * $requestJavadoc
#end
 */
public class $display.capitalize($requestName)Request {
	private static final Logger LOGGER = LoggerFactory.getLogger(${display.capitalize($requestName)}Request.class.getName());
	
#foreach ($parameter in $parameters)
	private final $parameter.type $parameter.name;
#end
	private final long requestId;

	/**
	 * Constructor
	 *
#foreach ($parameter in $parameters)
#if ($parameter.javadoc)
	 * @param $parameter.name $parameter.javadoc
#end
#end
	 */
	public $display.capitalize($requestName)Request(#foreach ($parameter in $parameters)$parameter.type $parameter.name, #end long requestId) {
#foreach ($parameter in $parameters)
		this.$parameter.name = $parameter.name;
#end
		this.requestId = requestId;
	}

	/**
	 * Test if we can narrow a JSON message to this request
	 * @param request the JSON request
	 * @return true if we can narrow this request
	 */
	public static boolean canNarrow(JsonRpc20Request request) {
		return "$display.capitalize($requestName)".equals(request.getMethod());
	}

	/**
	 * Narrow a request
	 * @param request the request
	 * @return the new request
	 */
	public static $display.capitalize($requestName)Request narrow(JsonRpc20Request request) {
		try {
#foreach ($parameter in $parameters)
#if ($parameter.type == "List<String>")
			$parameter.type $parameter.name = new LinkedList<>();
			JSONArray ${parameter.name}Array = (JSONArray)request.getMapParam("$parameter.name");
			for (int i = 0; i < ${parameter.name}Array.size(); i++) ${parameter.name}.add((String)${parameter.name}Array.get(i));
#elseif ($parameter.type == "List<Integer>")
			$parameter.type $parameter.name = new LinkedList<>();
			JSONArray ${parameter.name}Array = (JSONArray)request.getMapParam("$parameter.name");
			for (int i = 0; i < ${parameter.name}Array.size(); i++) ${parameter.name}.add(((Long)${parameter.name}Array.get(i)).intValue());
#elseif ($parameter.type.startsWith("List<") && $parameter.isEnum == "true")
			$parameter.type $parameter.name = new LinkedList<>();
			JSONArray ${parameter.name}Array = (JSONArray)notice.getMapParam("$parameter.name");
			for (int i = 0; i < ${parameter.name}Array.size(); i++) ${parameter.name}.add(${parameter.genericType}.parse((String)${parameter.name}Array.get(i)));
#elseif ($parameter.type.indexOf(".") > 0 && $parameter.isEnum == "true")
			$parameter.type $parameter.name = ${parameter.type}.parse((String)request.getMapParam("$parameter.name"));
#elseif ($parameter.type.indexOf(".") > 0)
			$parameter.type $parameter.name = ${parameter.type}.parse((JSONObject)request.getMapParam("$parameter.name"));
#elseif ($parameter.type == "int")
			$parameter.type $parameter.name = ((Long)request.getMapParam("$parameter.name")).intValue();
#elseif ($parameter.type == "double")
			$parameter.type $parameter.name = 0.0;
			if (request.getMapParam("$parameter.name") instanceof BigDecimal)
				$parameter.name = ((BigDecimal)request.getMapParam("$parameter.name")).doubleValue();
			else
				$parameter.name = ((Double)request.getMapParam("$parameter.name")).doubleValue();
#else
			$parameter.type $parameter.name = ($parameter.type)request.getMapParam("$parameter.name");
#end
#end
			return new $display.capitalize($requestName)Request(#foreach ($parameter in $parameters)$parameter.name, #end (Long)request.getId());
		} catch (Throwable e) {
			LOGGER.warn("Error narrowing request: {}", ExceptionUtils.getMessage(e), e);
		}
		return null;
	}

	/**
	 * @return the JSON string of this object
	 */
	public String toJSONString() {
		Map<String, Object> paramsMap = new HashMap<>();
#foreach ($parameter in $parameters)
#if ($parameter.type.indexOf(".") > 0)
		if ($parameter.name != null) paramsMap.put("$parameter.name", $parameter.name);
#else
		paramsMap.put("$parameter.name", $parameter.name);
#end
#end
		return new JsonRpc20Request("$display.capitalize($requestName)", requestId, paramsMap).toJSONString();
	}

#foreach ($parameter in $parameters)
#if ($parameter.javadoc)
	/**
	 * @return $parameter.javadoc
	 */
#end
#if ($parameter.type == "boolean")
	public $parameter.type is$display.capitalize($parameter.name)() {
		return $parameter.name;
	}
	
#else
	public $parameter.type get$display.capitalize($parameter.name)() {
		return $parameter.name;
	}
	
#end
#end
	/**
	 * @return the request id
	 */
	public long getRequestId() {
		return requestId;
	}
}
