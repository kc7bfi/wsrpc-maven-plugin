package $packageName;

import java.lang.StringBuilder;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;

/**
 * Generated with Velocity - DO NOT EDIT
#if ($classJavadoc)
 *
 * $classJavadoc
#end
 */
public class $display.capitalize($className) {
	private static final Logger LOGGER = LoggerFactory.getLogger(${display.capitalize($className)}.class.getName());

#foreach ($member in $members)
#if ($member.type == "List<String>")
	private $member.type $member.name = new LinkedList<>();
#elseif ($member.type == "Set<String>")
	private $member.type $member.name = new HashSet<>();
#else
	private $member.type $member.name;
#end
#end

	/**
	 * Constructor.
	 */
	public $display.capitalize($className)() {
	}

	/**
	 * Constructor
	 *
#foreach ($member in $members)
#if ($member.javadoc)
	 * @param $member.name $member.javadoc
#end
#end
	 */
	public $display.capitalize($className)(#foreach ($member in $members)$member.type $member.name#if($foreach.hasNext),#end#end) {
#foreach ($member in $members)
		this.$member.name = $member.name;
#end
	}

	/**
	 * Parse a JSON message to this list
	 * @param json the JSON message
	 * @return the list
	 */
	public static $display.capitalize($className) parse(String json) {
		if (json == null) return null;
		try {
			JSONParser parser = new JSONParser(JSONParser.MODE_PERMISSIVE);
			JSONObject jsonObj = (JSONObject)parser.parse(json);
			return parse(jsonObj);
		} catch (Exception e) {
			LOGGER.warn("Error parsing JSON string {}: {}", json, ExceptionUtils.getMessage(e), e); 
			return null;
		}
	}

	/**
	 * Parse a JSON object to this list
	 * @param jsonObj the JSON object
	 * @return the list
	 */
	public static $display.capitalize($className) parse(JSONObject jsonObj) {
		if (jsonObj == null) return null;
		try {
			$display.capitalize($className) newObj = new $display.capitalize($className)();
#foreach ($member in $members)
#if ($member.type == "Long")
			newObj.$member.name = ((Long)jsonObj.get("$member.name"));
#elseif ($member.type == "int")
			newObj.$member.name = ((Long)jsonObj.get("$member.name")).intValue();
#elseif ($member.type == "double")
			if (jsonObj.get("$member.name") instanceof BigDecimal)
				newObj.$member.name = ((BigDecimal)jsonObj.get("$member.name")).doubleValue();
			else
				newObj.$member.name = ((Double)jsonObj.get("$member.name")).doubleValue();
#elseif ($member.type == "List<String>")
			{
    			JSONArray items = (JSONArray) jsonObj.get("$member.name");
   				if (items != null && items.size() > 0) for (Object item : items) newObj.get$display.capitalize($member.name)().add((String)item);
   			}
#elseif ($member.type == "Set<String>")
			{
		   		JSONArray items = (JSONArray) jsonObj.get("$member.name");
   				if (items != null && items.size() > 0) for (Object item : items) newObj.get$display.capitalize($member.name)().add((String)item);
   			}
#else
			newObj.$member.name = ($member.type)jsonObj.get("$member.name");
#end
#end
			return newObj;
		} catch (Exception e) {
			LOGGER.warn("Error parsing JSON object: {}", ExceptionUtils.getMessage(e), e); 
			return null;
		}
	}

	/**
	 * @return the JSON string of this object
	 */
	public String toJSONString() {
		StringBuilder json = new StringBuilder("{");
#foreach ($member in $members)
#if ($member.type == "Long")
		if ($member.name != null) json.append("'$member.name': '" + $member.name + "',");
#elseif ($member.type == "String")
		json.append("'$member.name': '" + $member.name + "',");
#elseif ($member.type == "List<String>")
		{
			json.append("'$member.name': [");
			boolean isFirst = true;
			for (String item : $member.name) {
				if (!isFirst) json.append(",");
				json.append("[" + item + "]");
				isFirst = false;
			}
		}
		json.append("]}");
#elseif ($member.type == "Set<String>")
		{ 
			json.append("'$member.name': [");
			boolean isFirst = true;
			for (String item : $member.name) {
				if (!isFirst) json.append(",");
				json.append("[" + item + "]");
				isFirst = false;
			}
		}
		json.append("]}");
#else
		json.append("'$member.name': " + $member.name + ",");
#end
#end
		json.setLength(json.length() - 1);
		return json.append("}").toString();
	}
	
	@Override
	public String toString() {
		return toJSONString();
	}

#foreach ($member in $members)
#if ($member.javadoc)
	/**
	 * @return $member.javadoc
	 */
#end
#if ($member.type == "boolean")
	public $member.type is$display.capitalize($member.name)() {
		return $member.name;
	}
	
#else
	public $member.type get$display.capitalize($member.name)() {
		return $member.name;
	}
	
#end
#end
#foreach ($member in $members)
#if ($member.javadoc)
	/**
	 * @param $member.name $member.javadoc
	 */
#end
	public void set$display.capitalize($member.name)($member.type $member.name) {
		this.$member.name = $member.name;
	}

#end
}
