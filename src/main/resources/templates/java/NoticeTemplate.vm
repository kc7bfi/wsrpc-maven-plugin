package $packageName;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;

import net.psgglobal.wsrpc.jsonrpc2.JsonRpc20Request;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated with Velocity - DO NOT EDIT
#if ($noticeJavadoc)
 *
 * $noticeJavadoc
#end
 */
public class $display.capitalize($noticeName)Notice {
	private static final Logger LOGGER = LoggerFactory.getLogger(${display.capitalize($noticeName)}Notice.class.getName());
	
	private static Gson GSON = new Gson();

#foreach ($parameter in $parameters)
	private final $parameter.type $parameter.name;
#end
	private long requestId;

	/**
	 * Constructor
	 *
#foreach ($parameter in $parameters)
#if ($parameter.javadoc)
	 * @param $parameter.name $parameter.javadoc
#end
#end
	 */
	public $display.capitalize($noticeName)Notice(#foreach ($parameter in $parameters)$parameter.type $parameter.name, #end long requestId) {
#foreach ($parameter in $parameters)
		this.$parameter.name = $parameter.name;
#end
		this.requestId = requestId;
	}

	/**
	 * Test if we can narrow a JSON message to this notice
	 * @param notice the JSON notice
	 * @return true if we can narrow this notice
	 */
	public static boolean canNarrow(JsonRpc20Request notice) {
		return "$display.capitalize($noticeName)".equals(notice.getMethod());
	}

	/**
	 * Narrow a notice
	 * @param notice the notice
	 * @return the new notice
	 */
	public static $display.capitalize($noticeName)Notice narrow(JsonRpc20Request notice) {
		$display.capitalize($noticeName)Notice narrowed = GSON.fromJson(GSON.toJson(notice.getParams()), $display.capitalize($noticeName)Notice.class);
		narrowed.requestId = notice.getId();
		return narrowed;
	}

	/**
	 * @return the JSON string of this object
	 */
	public String toJSONString() {
		Map<String, Object> paramsMap = new HashMap<>();
#foreach ($parameter in $parameters)
#if ($parameter.type.indexOf(".") > 0)
		if ($parameter.name != null) paramsMap.put("$parameter.name", $parameter.name);
#else
		paramsMap.put("$parameter.name", $parameter.name);
#end
#end
		return new JsonRpc20Request("$display.capitalize($noticeName)", requestId, paramsMap).toJSONString();
	}

#foreach ($parameter in $parameters)
#if ($parameter.javadoc)
	/**
	 * @return $parameter.name $parameter.javadoc
	 */
#end
#if ($parameter.type == "boolean")
	public $parameter.type is$display.capitalize($parameter.name)() {
		return $parameter.name;
	}
	
#else
	/**
	 * @return the request id
	 */
	public $parameter.type get$display.capitalize($parameter.name)() {
		return $parameter.name;
	}
	
#end
#end
	public long getRequestId() {
		return requestId;
	}
}
